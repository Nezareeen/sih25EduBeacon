
# Vite + React + MongoDB + Node.js + Express

## Project Structure
```
project-root/
├── client/          # React frontend
│   ├── public/
│   └── src/
│       ├── components/
│       ├── pages/
│       ├── services/
│       ├── App.jsx
│       └── main.jsx
├── server/          # Node.js + Express backend
│   ├── controllers/
│   ├── models/
│   ├── routes/
│   ├── middleware/
│   ├── config/
│   └── server.js
├── .env
└── package.json
```

## Backend Setup (server/)

### 1. Initialize Node.js project
```bash
cd server
npm init -y
```

### 2. Install dependencies
```bash
npm install express mongoose cors dotenv
npm install -D nodemon
```

### 3. Environment Variables (.env)
VITE_API_URL=http://localhost:5000

### 4. Server Entry Point (server.js)
```javascript
import express from 'express';
import cors from 'cors';
import dotenv from 'dotenv';
import connectDB from './config/db.js';
import userRoutes from './routes/userRoutes.js';

dotenv.config();

// Connect to MongoDB
connectDB();

const app = express();
const PORT = process.env.PORT || 5000;

// Middleware
app.use(cors());
app.use(express.json());

// Routes
app.use('/api/users', userRoutes);

app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});
```

### 5. Database Configuration (config/db.js)
```javascript
import mongoose from 'mongoose';

const connectDB = async () => {
  try {
    const conn = await mongoose.connect(process.env.MONGO_URI || 'mongodb://localhost:27017/myapp');
    console.log(`MongoDB Connected: ${conn.connection.host}`);
  } catch (error) {
    console.error('Database connection error:', error);
    process.exit(1);
  }
};

export default connectDB;
```

### 6. User Model (models/User.js)
```javascript
import mongoose from 'mongoose';

const userSchema = new mongoose.Schema({
  name: {
    type: String,
    required: true
  },
  email: {
    type: String,
    required: true,
    unique: true
  },
  password: {
    type: String,
    required: true
  }
}, {
  timestamps: true
});

export default mongoose.model('User', userSchema);
```

### 7. User Controller (controllers/userController.js)
```javascript
import User from '../models/User.js';

// @desc    Get all users
// @route   GET /api/users
// @access  Public
export const getUsers = async (req, res) => {
  try {
    const users = await User.find({});
    res.json(users);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

// @desc    Create a user
// @route   POST /api/users
// @access  Public
export const createUser = async (req, res) => {
  try {
    const { name, email, password } = req.body;
    const user = await User.create({ name, email, password });
    res.status(201).json(user);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};
```

### 8. User Routes (routes/userRoutes.js)
```javascript
import express from 'express';
import { getUsers, createUser } from '../controllers/userController.js';

const router = express.Router();

router.route('/')
  .get(getUsers)
  .post(createUser);

export default router;
```

## Frontend Setup (client/)

### 1. Create React app with Vite
```bash
cd client
npm create vite@latest . -- --template react
npm install
```

### 2. Install additional dependencies
```bash
npm install axios
```

### 3. API Service (src/services/api.js)
```javascript
import axios from 'axios';

const API_URL = import.meta.env.VITE_API_URL || 'http://localhost:5000';

const api = axios.create({
  baseURL: API_URL,
  headers: {
    'Content-Type': 'application/json',
  },
});

export default api;
```

### 4. Main App Component (src/App.jsx)
```jsx
import React, { useState, useEffect } from 'react';
import api from './services/api';

function App() {
  const [users, setUsers] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    fetchUsers();
  }, []);

  const fetchUsers = async () => {
    try {
      const response = await api.get('/api/users');
      setUsers(response.data);
      setLoading(false);
    } catch (error) {
      console.error('Error fetching users:', error);
      setLoading(false);
    }
  };

  if (loading) return <div>Loading...</div>;

  return (
    <div className="App">
      <h1>Users List</h1>
      <ul>
        {users.map(user => (
          <li key={user._id}>
            {user.name} - {user.email}
          </li>
        ))}
      </ul>
    </div>
  );
}

export default App;
```

### 5. Main Entry Point (src/main.jsx)
```jsx
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import './index.css';

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
);
```

## Package.json Scripts

### Server package.json scripts:
```json
{
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js"
  }
}
```

### Client package.json scripts:
```json
{
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview"
  }
}
```

## Running the Application

1. Start MongoDB (ensure it's running on default port 27017)
2. In server directory:
   ```bash
   npm run dev
   ```
3. In client directory:
   ```bash
   npm run dev
   ```

The application will be available at:
- Frontend: http://localhost:5173
- Backend API: http://localhost:5000

## Key Features Implemented

1. **Full MERN Stack**:
   - MongoDB for database
   - Express.js for backend API
   - React for frontend
   - Node.js as runtime environment

2. **Environment Configuration**:
   - Separate .env files for backend
   - Vite environment variables for frontend

3. **RESTful API**:
   - GET /api/users - Fetch all users
   - POST /api/users - Create new user

4. **Database Integration**:
   - Mongoose ODM for MongoDB
   - User model with validation

5. **Frontend Integration**:
   - Axios for API calls
   - Responsive UI with React components

This setup provides a solid foundation for a full-stack web application using modern technologies and follows best practices for separation of concerns between frontend and backend.
